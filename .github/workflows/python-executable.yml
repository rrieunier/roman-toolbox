name: Package executable

on: [push]

jobs:
  build-executable:
    runs-on: windows-latest
    strategy:
      max-parallel: 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        pip install --no-cache-dir -r requirements.txt
    - name: Make executable
      run: |
        python -m PyInstaller --onefile --clean -n main main.pyw
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: roman-toolbox.exe
        path: dist/main.exe
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.head_commit.message }}
        release_name: ${{ github.event.head_commit.message }}
        overwrite: true
        body: |
        draft: false
        prerelease: false
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: dist/main.exe
        asset_name: roman-toolbox.exe
        asset_content_type: application/zip
